// import React, { useEffect, useState } from "react";
// import { useDispatch, useSelector } from "react-redux";

// import { customFetch } from "../../axios/AxiosFetch";
// import { fetchCategories } from "../../features/CategoriesSlice";

// const ProductForm = () => {
//   const [product, setProduct] = useState({
//     name: "",
//     CategoryId: null,
//     BrandId: null,
//     desc: "",
//     careInstructions: "",
//     about: "",
//     colorVariation: [],
//   });

//   const dispatch = useDispatch(); // Dispatch function to trigger actions
//   const { categories, status, error } = useSelector(
//     (state) => state.categories
//   ); // Access categories state from the Redux store

//   useEffect(() => {
//     // Dispatch fetchCategories action to load categories when the component mounts
//     if (status === "idle") {
//       dispatch(fetchCategories());
//     }
//   }, [dispatch, status]); // Run this effect when component mounts or status changes
//   console.log(categories);

//   const handleProductChange = (e) => {
//     setProduct({ ...product, [e.target.name]: e.target.value });
//   };

//   const addColorVariation = () => {
//     setProduct({
//       ...product,
//       colorVariation: [
//         ...product.colorVariation,
//         {
//           name: "",
//           originalPrice: 0,
//           salePrice: 0,
//           images: [],
//           sizeVariations: [],
//         },
//       ],
//     });
//   };

//   const addSizeVariation = (colorIndex) => {
//     const updatedColorVariation = [...product.colorVariation];
//     updatedColorVariation[colorIndex].sizeVariations.push({
//       sizeOptionId: null,
//       quantityInStock: 0,
//       code: "",
//     });
//     setProduct({ ...product, colorVariation: updatedColorVariation });
//   };

//   const removeColorVariation = (colorIndex) => {
//     const updatedColorVariation = product.colorVariation.filter(
//       (_, index) => index !== colorIndex
//     );
//     setProduct({ ...product, colorVariation: updatedColorVariation });
//   };

//   const removeSizeVariation = (colorIndex, sizeIndex) => {
//     const updatedColorVariation = [...product.colorVariation];
//     updatedColorVariation[colorIndex].sizeVariations = updatedColorVariation[
//       colorIndex
//     ].sizeVariations.filter((_, index) => index !== sizeIndex);
//     setProduct({ ...product, colorVariation: updatedColorVariation });
//   };

//   const handleColorChange = (index, field, value) => {
//     const updatedColors = [...product.colorVariation];
//     updatedColors[index][field] = value;
//     setProduct({ ...product, colorVariation: updatedColors });
//   };

//   const handleSizeChange = (colorIndex, sizeIndex, field, value) => {
//     const updatedColors = [...product.colorVariation];
//     updatedColors[colorIndex].sizeVariations[sizeIndex][field] = value;
//     setProduct({ ...product, colorVariation: updatedColors });
//   };

//   const addImageToColor = (colorIndex) => {
//     const updatedColors = [...product.colorVariation];
//     updatedColors[colorIndex].images.push("");
//     setProduct({ ...product, colorVariation: updatedColors });
//   };

//   const handleImageChange = (colorIndex, imageIndex, value) => {
//     const updatedColors = [...product.colorVariation];
//     updatedColors[colorIndex].images[imageIndex] = value;
//     setProduct({ ...product, colorVariation: updatedColors });
//   };

//   const postProduct = async () => {
//     const user = JSON.parse(localStorage.getItem("user"));
//     const token = user?.token;

//     const productDto = {
//       name: product.name,
//       categoryId: product.CategoryId - 0,
//       brandId: product.BrandId - 0,
//       desc: product.desc,
//       careInstructions: product.careInstructions || "",
//       about: product.about || "",
//       colorVariation: product.colorVariation.map((color) => ({
//         images: color.images || [],
//         originalPrice: parseFloat(color.originalPrice) || 0.0,
//         salePrice: parseFloat(color.salePrice) || 0.0,
//         name: color.color_name,
//         sizeVariations: color.sizeVariations.map((size) => ({
//           sizeOptionId: size.sizeOptionId,
//           quantityInStock: parseInt(size.quantityInStock) || 0,
//           code: size.code || "",
//         })),
//       })),
//     };
//     const finalPayload = { productDto: productDto };
//     try {
//       const response = await customFetch.post("/admin/products", finalPayload, {
//         headers: {
//           Authorization: token ? `Bearer ${token}` : "",
//         },
//       });

//       console.log("Product saved successfully!", response.data);
//     } catch (error) {
//       console.error("Error while saving product:", error.response || error);
//     }
//   };

//   return (
//     <div className="max-w-4xl mx-auto p-6 bg-white shadow-md rounded-lg">
//       <h2 className="text-3xl font-bold text-gray-800 mb-6">
//         Create New Product
//       </h2>

//       {/* Product Details */}
//       <div className="space-y-4 mb-6">
//         <input
//           type="text"
//           name="name"
//           value={product.name}
//           onChange={handleProductChange}
//           placeholder="Product Name"
//           className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//         />
//         {/* <input
//           type="number"
//           name="CategoryId"
//           value={product.CategoryId || ""}
//           onChange={handleProductChange}
//           placeholder="Category ID"
//           className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//         /> */}
//         <select name="" id=""></select>
//         <input
//           type="number"
//           name="BrandId"
//           value={product.BrandId || ""}
//           onChange={handleProductChange}
//           placeholder="Brand ID"
//           className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//         />
//         <textarea
//           name="desc"
//           value={product.desc}
//           onChange={handleProductChange}
//           placeholder="Description"
//           className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//           rows={3}
//         ></textarea>
//         <textarea
//           name="careInstructions"
//           value={product.careInstructions}
//           onChange={handleProductChange}
//           placeholder="Care Instructions"
//           className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//           rows={2}
//         ></textarea>
//         <textarea
//           name="about"
//           value={product.about}
//           onChange={handleProductChange}
//           placeholder="About"
//           className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//           rows={2}
//         ></textarea>
//       </div>

//       {/* Color Variations */}
//       <h3 className="text-xl font-bold text-gray-700 mb-4">Color Variations</h3>
//       <div className="space-y-6">
//         {product.colorVariation.map((color, colorIndex) => (
//           <div
//             key={colorIndex}
//             className="p-4 border rounded-lg bg-gray-50 space-y-4"
//           >
//             <div className="flex space-x-4">
//               <input
//                 type="text"
//                 placeholder="Color Name"
//                 value={color.name}
//                 onChange={(e) =>
//                   handleColorChange(colorIndex, "name", e.target.value)
//                 }
//                 className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//               />
//               <input
//                 type="number"
//                 placeholder="Original Price"
//                 value={color.originalPrice || ""}
//                 onChange={(e) =>
//                   handleColorChange(colorIndex, "originalPrice", e.target.value)
//                 }
//                 className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//               />
//               <input
//                 type="number"
//                 placeholder="Sale Price"
//                 value={color.salePrice || ""}
//                 onChange={(e) =>
//                   handleColorChange(colorIndex, "salePrice", e.target.value)
//                 }
//                 className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//               />
//             </div>

//             {/* Images */}
//             <div className="space-y-2">
//               <h4 className="font-semibold">Images</h4>
//               {color.images.map((image, imageIndex) => (
//                 <div key={imageIndex} className="flex items-center space-x-4">
//                   <input
//                     type="text"
//                     placeholder={`Image URL ${imageIndex + 1}`}
//                     value={image}
//                     onChange={(e) =>
//                       handleImageChange(colorIndex, imageIndex, e.target.value)
//                     }
//                     className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//                   />
//                   <button
//                     onClick={() => {
//                       const updatedColors = [...product.colorVariation];
//                       updatedColors[colorIndex].images = updatedColors[
//                         colorIndex
//                       ].images.filter((_, idx) => idx !== imageIndex);
//                       setProduct({ ...product, colorVariation: updatedColors });
//                     }}
//                     className="px-3 py-2 bg-red-500 text-white rounded-md"
//                   >
//                     Remove
//                   </button>
//                 </div>
//               ))}
//               <button
//                 onClick={() => addImageToColor(colorIndex)}
//                 className="px-4 py-2 bg-blue-500 text-white rounded-md"
//               >
//                 Add Image
//               </button>
//             </div>

//             {/* Size Variations */}
//             <div className="space-y-2">
//               <h4 className="font-semibold">Size Variations</h4>
//               {color.sizeVariations.map((size, sizeIndex) => (
//                 <div key={sizeIndex} className="flex space-x-4">
//                   <input
//                     type="number"
//                     placeholder="Size Option ID"
//                     value={size.sizeOptionId || ""}
//                     onChange={(e) =>
//                       handleSizeChange(
//                         colorIndex,
//                         sizeIndex,
//                         "sizeOptionId",
//                         e.target.value
//                       )
//                     }
//                     className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//                   />
//                   <input
//                     type="number"
//                     placeholder="Quantity in Stock"
//                     value={size.quantityInStock || ""}
//                     onChange={(e) =>
//                       handleSizeChange(
//                         colorIndex,
//                         sizeIndex,
//                         "quantityInStock",
//                         e.target.value
//                       )
//                     }
//                     className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//                   />
//                   <input
//                     type="text"
//                     placeholder="Code"
//                     value={size.code || ""}
//                     onChange={(e) =>
//                       handleSizeChange(
//                         colorIndex,
//                         sizeIndex,
//                         "code",
//                         e.target.value
//                       )
//                     }
//                     className="w-full px-4 py-2 border rounded-md focus:ring focus:ring-blue-300"
//                   />
//                   <button
//                     onClick={() => removeSizeVariation(colorIndex, sizeIndex)}
//                     className="px-3 py-2 bg-red-500 text-white rounded-md"
//                   >
//                     Remove
//                   </button>
//                 </div>
//               ))}
//               <button
//                 onClick={() => addSizeVariation(colorIndex)}
//                 className="px-4 py-2 bg-blue-500 text-white rounded-md"
//               >
//                 Add Size Variation
//               </button>
//             </div>

//             <button
//               onClick={() => removeColorVariation(colorIndex)}
//               className="px-4 py-2 bg-red-500 text-white rounded-md"
//             >
//               Remove Color Variation
//             </button>
//           </div>
//         ))}
//         <button
//           onClick={addColorVariation}
//           className="px-4 py-2 bg-green-500 text-white rounded-md"
//         >
//           Add Color Variation
//         </button>
//       </div>

//       <button
//         onClick={() => postProduct()}
//         className="w-full mt-6 px-4 py-2 bg-blue-600 text-white rounded-md"
//       >
//         Save Product
//       </button>
//     </div>
//   );
// };

// export default ProductForm;

import { useDispatch, useSelector } from "react-redux";
import ColorVariation from "./ColorVariation";
import ProductDetails from "./ProductDetails";
import { useEffect, useState } from "react";
import { fetchCategories } from "../../features/CategoriesSlice";
import { customFetch } from "../../axios/AxiosFetch";
import { fetchBrand } from "../../features/BrandSlice";

const ProductForm = () => {
  const [product, setProduct] = useState({
    name: "",
    CategoryId: null,
    BrandId: null,
    desc: "",
    careInstructions: "",
    about: "",
    colorVariation: [],
  });

  const dispatch = useDispatch();
  const { categories, CategoryStatus, CategoryError } = useSelector(
    (state) => state.categories
  );
  const { brand, brandStatus, brandError } = useSelector(
    (state) => state.brand
  );

  useEffect(() => {
    console.log(CategoryStatus);
    if (CategoryStatus === "idle") {
      dispatch(fetchCategories());
    }
    if (brandStatus === "idle") {
      dispatch(fetchBrand());
    }
  }, [dispatch, CategoryStatus, brandStatus]);

  const addColorVariation = () => {
    setProduct({
      ...product,
      colorVariation: [
        ...product.colorVariation,
        {
          name: "",
          originalPrice: 0,
          salePrice: 0,
          images: [],
          sizeVariations: [],
        },
      ],
    });
  };

  const handleProductChange = (e) => {
    setProduct({ ...product, [e.target.name]: e.target.value });
  };

  const handleColorChange = (colorIndex, field, value) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation[colorIndex] = {
      ...updatedColorVariation[colorIndex],
      [field]: value,
    };
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const addImageToColor = (colorIndex) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation[colorIndex].images.push("");
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const handleImageChange = (colorIndex, imageIndex, newImageUrl) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation[colorIndex].images[imageIndex] = newImageUrl;
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const addSizeVariation = (colorIndex) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation[colorIndex].sizeVariations.push({
      sizeOptionId: "",
      quantityInStock: "",
      code: "",
    });
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const removeColorVariation = (colorIndex) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation.splice(colorIndex, 1);
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const handleSizeChange = (colorIndex, sizeIndex, field, value) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation[colorIndex].sizeVariations[sizeIndex] = {
      ...updatedColorVariation[colorIndex].sizeVariations[sizeIndex],
      [field]: value,
    };
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const removeSizeVariation = (colorIndex, sizeIndex) => {
    const updatedColorVariation = [...product.colorVariation];
    updatedColorVariation[colorIndex].sizeVariations.splice(sizeIndex, 1);
    setProduct({ ...product, colorVariation: updatedColorVariation });
  };

  const postProduct = async () => {
    const user = JSON.parse(localStorage.getItem("user"));
    const token = user?.token;

    const productDto = {
      name: product.name,
      categoryId: product.CategoryId - 0,
      brandId: product.BrandId - 0,
      desc: product.desc,
      careInstructions: product.careInstructions || "",
      about: product.about || "",
      colorVariation: product.colorVariation.map((color) => ({
        images: color.images || [],
        originalPrice: parseFloat(color.originalPrice) || 0.0,
        salePrice: parseFloat(color.salePrice) || 0.0,
        name: color.name,
        sizeVariations: color.sizeVariations.map((size) => ({
          sizeOptionId: size.sizeOptionId,
          quantityInStock: parseInt(size.quantityInStock) || 0,
          code: size.code || "",
        })),
      })),
    };
    const finalPayload = { productDto: productDto };

    try {
      const response = await customFetch.post("/admin/products", finalPayload, {
        headers: {
          Authorization: token ? `Bearer ${token}` : "",
        },
      });
      console.log(response);
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div className="bg-white shadow-md rounded-lg p-4">
      <h2 className="text-3xl font-bold text-gray-800 mb-6">
        Create New Product
      </h2>

      <ProductDetails
        product={product}
        handleProductChange={handleProductChange}
        categories={categories}
        CategoryStatus={CategoryStatus}
        CategoryError={CategoryError}
        brand={brand}
        brandStatus={brandStatus}
        brandError={brandError}
      />

      <ColorVariation
        colorVariation={product.colorVariation}
        handleColorChange={handleColorChange}
        addImageToColor={addImageToColor}
        handleImageChange={handleImageChange}
        addSizeVariation={addSizeVariation}
        removeColorVariation={removeColorVariation}
        handleSizeChange={handleSizeChange}
        removeSizeVariation={removeSizeVariation}
      />

      <button
        onClick={addColorVariation}
        className="px-4 py-2 bg-green-500 text-white rounded-md"
      >
        Add Color Variation
      </button>

      <button
        onClick={postProduct}
        className="w-full mt-6 px-4 py-2 bg-blue-600 text-white rounded-md"
      >
        Save Product
      </button>
    </div>
  );
};

export default ProductForm;


import React from "react";
import { FaCheck } from "react-icons/fa";
import { FiInfo } from "react-icons/fi";

const SelectInput = ({ name, value, onChange, items, label }) => {
  return (
    <div className="w-full">
      <div className="relative">
        <select
          id={name}
          name={name}
          value={value}
          onChange={onChange}
          className={`appearance-none ${
            value
              ? "border-2 border-teal-500 focus:border-teal-500 "
              : "border-2 border-red-500 focus:border-red-500 "
          } py-3 px-4 block w-full rounded-lg text-sm outline-none border-solid`}
        >
          <option value="">Please select a {label}</option>
          {items.map((item) => (
            <option key={item.id} value={item.id}>
              {item.name}
            </option>
          ))}
        </select>
        <div className="absolute inset-y-0 right-3 flex items-center pointer-events-none">
          {value ? (
            ""
          ) : (
            <FiInfo
              title={`You must choose a ${label}.`}
              className="w-6 h-6 text-red-500 cursor-pointer z-50"
            />
          )}
        </div>
      </div>
      {value ? (
        ""
      ) : (
        <p className="px-3 text-sm text-red-600 mt-2">
          Please select a valid state.
        </p>
      )}
    </div>
  );
};

export default SelectInput;




import { Form } from "react-router-dom";
import useBrand from "../../../api/FetchBrand";
import useCategory from "../../../api/FetchCategory";
import useSizeOption from "../../../api/FetchSizeOption";
import Loading from "../../Loading";
import { useState } from "react";

const Filter = () => {
  const [filter, setFilter] = useState({
    search: "",
    category: "",
    brand: "",
    color: "",
    size: "",
    maxPrice: "",
    page: 0,
  });
  const { data: categories, isLoading: categoryIsLoading } = useCategory();
  const { data: brand, isLoading: brandIsLoading } = useBrand();
  // const { data: sizes, isLoading: sizesIsLoading } = useSizeOption(1);

  if (categoryIsLoading || brandIsLoading) {
    return <Loading />;
  }
  // const handleSubmit = (e) => {
  //   e.preventdefault
  // }

  return (
    <Form className="bg-gray-200 rounded-md p-8 grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 items-center">
      {/* Search Field */}
      <div className="flex flex-col">
        <label htmlFor="search" className="mb-2 text-sm font-medium">
          Search
        </label>
        <input
          type="search"
          id="search"
          name="search"
          value={filter.search} // Bind to global state
          onChange={(e) => setFilter({ ...filter, search: e.target.value })} // Dispatch action
          className="p-2 border border-gray-300 rounded text-sm"
        />
      </div>

      {/* Category Field */}
      {/* <div className="flex flex-col">
        <label htmlFor="category" className="mb-2 text-sm font-medium">
          Category
        </label>
        <select
          id="category"
          name="category"
          value={filter.category} // Bind to global state
          onChange={(e) => setFilter({ ...filter, category: e.target.value })} // Dispatch action
          className="p-2 border border-gray-300 rounded text-sm"
        >
          <option value="">All Categories</option>
          {categories.map((cat) => (
            <option key={cat.id} value={cat.categoryName}>
              {cat.categoryName}
            </option>
          ))}
        </select>
      </div> */}

      {/* Brand Field */}
      <div className="flex flex-col">
        <label htmlFor="brand" className="mb-2 text-sm font-medium">
          Brand
        </label>
        <select
          id="brand"
          name="brand"
          value={filter.brand} // Bind to global state
          onChange={(e) => setFilter({ ...filter, brand: e.target.value })} // Dispatch action
          className="p-2 border border-gray-300 rounded text-sm"
        >
          <option value="">All Brands</option>
          {brand.map((b) => (
            <option key={b.name} value={b.name}>
              {b.name}
            </option>
          ))}
        </select>
      </div>

      {/* Color Field */}
      <div className="flex flex-col">
        <label htmlFor="color" className="mb-2 text-sm font-medium">
          Color
        </label>
        <input
          type="color"
          id="color"
          value={filter.color} // Bind to global state
          onChange={(e) => setFilter({ ...filter, color: e.target.value })} // Dispatch action
          className="w-16 h-16 rounded-full border focus:ring focus:ring-blue-300"
        />
      </div>

      {/* Size Field */}
      {/* <div className="flex flex-col">
        <label htmlFor="size" className="mb-2 text-sm font-medium">
          Size
        </label>
        <select
          id="size"
          name="size"
          value={filter.size} // Bind to global state
          onChange={(e) => setFilter({ ...filter, size: e.target.value })} // Dispatch action
          className="p-2 border border-gray-300 rounded text-sm"
        >
          <option value="">All Sizes</option>
          {sizes.map((sz) => (
            <option key={sz.id} value={sz.name}>
              {sz.name}
            </option>
          ))}
        </select>
      </div> */}

      {/* Max Price Field */}
      <div className="flex flex-col">
        <label htmlFor="maxPrice" className="mb-2 text-sm font-medium">
          Max Price
        </label>
        <input
          type="number"
          id="maxPrice"
          name="maxPrice"
          value={filter.maxPrice} // Bind to global state
          onChange={(e) => setFilter({ ...filter, maxPrice: e.target.value })} // Dispatch action
          className="p-2 border border-gray-300 rounded text-sm"
        />
      </div>

      {/* Buttons */}
      <button type="submit" className="bg-blue-600 p-5 rounded-full">
        Search
      </button>
      <button
        type="button"
        className="bg-blue-600 p-5 rounded-full"
        onClick={() =>
          setFilter({
            ...filter,
            search: "",
            category: "",
            brand: "",
            color: "",
            size: "",
            maxPrice: "",
          })
        } // Reset global state
      >
        Reset
      </button>
    </Form>
  );
};

export default Filter;

  // return (
  //   <>
  //     <div className="mt-20 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
  //       {products.map((p) => {
  //         const { id, name, images, salePrice } = p;
  //         let imageUrl = images[0];
  //         let hoverImageUrl = images[1];
  //         if (filterFromQueryParams.color) {
  //           const colorVariation = p.colorVariationsResponses.find(
  //             (i) => i.colorName === filterFromQueryParams.color
  //           );
  //           if (colorVariation) {
  //             imageUrl = colorVariation.images[0];
  //             hoverImageUrl = colorVariation.images[1];
  //           }
  //         }
  //         return (
  //           <Link to={`/products/${id}`} key={id} className="group">
  //             <div className="h-[400px] w-full bg-cover bg-center rounded-lg relative overflow-hidden">
  //               <img
  //                 src={imageUrl}
  //                 alt=""
  //                 className="object-cover h-[300px] w-full transition-transform duration-300 group-hover:scale-105"
  //               />
  //               {/* Hover Image */}
  //               {hoverImageUrl && (
  //                 <img
  //                   src={hoverImageUrl}
  //                   alt=""
  //                   className="object-cover h-full w-full absolute top-0 left-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100"
  //                 />
  //               )}
  // <button className="absolute right-5 bottom-4 text-xl text-white bg-black bg-opacity-50 p-2 rounded-full transition-colors duration-300 hover:bg-opacity-70">
  //   <FaRegHeart />
  // </button>
  //             </div>
  //             <p className="mt-2 font-medium tracking-tighter ">{name}</p>
  //             <span className="block text-gray-600 font-bold">
  //               {salePrice}$
  //             </span>
  //           </Link>
  //         );
  //       })}
  //     </div>
  //     <Pagination pageCount={totalPages} page={pageable.pageNumber} />
  //   </>
  // );


  import { Form, useLocation, useNavigate, useParams } from "react-router-dom";
import useBrand from "../../../api/FetchBrand";
import useCategory from "../../../api/FetchCategory";
import useSizeOption from "../../../api/FetchSizeOption";
import Loading from "../../Loading";
import { useState } from "react";
import TextField from "../../InputComponent/TextField";
import ColorPicker from "../../InputComponent/ColorPicker";
import RangeInput from "../../InputComponent/RangeInput";
import SubmitBtn from "../../InputComponent/SubmitBtn";
import CategorySelect from "../../InputComponent/CategorySelect";
import BrandSelect from "../../InputComponent/BrandSelect";
import SizeOptionSelect from "../../InputComponent/SizeOptionSelect";

const Filter = () => {
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);

  const [filter, setFilter] = useState({
    search: "",
    category: "",
    brand: "",
    color: "",
    size: "",
    maxPrice: "",
    page: queryParams.get("page") || 0,
    parentCategory: "men",
  });

  const { parentCategory } = useParams();

  const {
    data: categories,
    isLoading: categoryIsLoading,
    isError: categoryIsError,
  } = useCategory(parentCategory === "men" ? 1 : 2);
  const {
    data: brand,
    isLoading: brandIsLoading,
    isError: brandIsError,
  } = useBrand();

  const {
    data: sizes,
    isLoading: sizesIsLoading,
    isError: sizesIsError,
  } = useSizeOption();
  const navigate = useNavigate();
  if ((categoryIsLoading || brandIsLoading, sizesIsLoading)) {
    return <>an error occured</>;
  }
  if ((categoryIsError || brandIsError, sizesIsError)) {
    return <Loading />;
  }
  const handleSubmit = (e) => {
    e.preventDefault();

    const queryParams = new URLSearchParams();

    if (filter.search) queryParams.set("search", filter.search);
    if (filter.category) queryParams.set("category", filter.category);
    if (filter.brand) queryParams.set("brand", filter.brand);
    if (filter.color) queryParams.set("color", filter.color);
    if (filter.size) queryParams.set("size", filter.size);
    if (filter.maxPrice) queryParams.set("maxPrice", filter.maxPrice);
    queryParams.set("parentCategory", parentCategory);

    // Navigate to the new URL with the updated query parameters
    navigate(`?${queryParams.toString()}`, {
      replace: true,
    });
  };

  return (
    <Form
      className="bg-gray-200 rounded-md p-8 grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 items-center"
      onSubmit={handleSubmit}
    >
      {/* Search Field */}
      <TextField
        name="search"
        type="text"
        value={filter.search}
        onChange={(e) => setFilter({ ...filter, search: e.target.value })}
        label="search"
        placeholder="search for a product"
      />
      {/* Category Field */}

      {/* <SelectInput
        name="category"
        items={categories}
        label="category"
        value={filter.category} // Bind to global state
        onChange={(e) => setFilter({ ...filter, category: e.target.value })}
      /> */}

      <CategorySelect
        value={filter.category}
        onChange={(e) => setFilter({ ...filter, category: e.target.value })}
      />
      {/* Brand Field */}
      {/* <SelectInput
        name="brand"
        items={brand}
        label="brand"
        value={filter.brand} // Bind to global state
        onChange={(e) => setFilter({ ...filter, brand: e.target.value })}
      /> */}

      <BrandSelect
        value={filter.brand}
        onChange={(e) => setFilter({ ...filter, brand: e.target.value })}
      />

      {/* Color Field */}
      <ColorPicker
        value={filter.color}
        onChange={(e) => setFilter({ ...filter, color: e.target.value })}
      />

      {/* Size Field */}
      {/* <SelectInput
        name="size"
        items={sizes}
        value={filter.size}
        onChange={(e) => setFilter({ ...filter, size: e.target.value })}
        label="size"
      /> */}

      <SizeOptionSelect
        value={filter.size}
        onChange={(e) => setFilter({ ...filter, size: e.target.value })}
      />

      {/* Max Price Field */}
      <RangeInput
        name="maxPrice"
        value={filter.maxPrice}
        label="price"
        type="range"
        onChange={(e) => setFilter({ ...filter, maxPrice: e.target.value })}
      />

      {/* Buttons */}
      <SubmitBtn text="search" />
      <button
        type="button"
        className="btn btn-secondary"
        onClick={() =>
          setFilter({
            ...filter,
            search: "",
            category: "",
            brand: "",
            color: "",
            size: "",
            maxPrice: "",
          })
        } // Reset global state
      >
        Reset
      </button>
    </Form>
  );
};

export default Filter;
